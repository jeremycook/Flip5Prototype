@model BrockAllen.MembershipReboot.Mvc.Areas.UserAccount.Models.LoginInputModel
@{
    Page.Title = "Login";
}

@if (User.Identity.IsAuthenticated)
{
    <p>
        You are already logged in as @User.Identity.Name, but you
        tried to access a resource that you do not have permission
        for. Please login with an account that does have access
        or contact your administrator to grant you access.
    </p>
}
else if (Model.ReturnUrl != null)
{
    <p>
        You are not logged in, and tried to access a resource
        that you do not have permission for. Please try logging in
        to access the requested resource.
    </p>
}

<section>
    <form action="" method="post" class="form-horizontal">
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)

        @Html.EditorForModel()

        <div class="form-group">
            <div class="col-sm-offset-3 col-sm-9">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </div>
    </form>
</section>

@{
    var ctx = Request.GetOwinContext();
    var providers = ctx.Authentication.GetAuthenticationTypes(d => !string.IsNullOrWhiteSpace(d.Caption));
    if (providers.Any())
    {
        <hr />

        <section class="text-center">
            <p>
                @foreach (var item in providers)
                {
                    <a href="@Url.Action("Login", "LinkedAccount", new { type = item.AuthenticationType })" class="btn btn-primary">
                        Login with @item.Caption
                    </a>
                }
            </p>
        </section>
    }
}

<hr />

<section class="text-center">
    <p>
        <a href="@Url.Action("CertificateLogin")" class="btn btn-primary">Login with a Certificate</a>
    </p>
</section>
